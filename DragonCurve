using System;
using System.Drawing;

namespace Fractals
{
    internal static class DragonFractalTask
    {
        public static double GetX(double currentX, double currentY, double angle)
        {
            return (currentX * Math.Cos(angle) - currentY * Math.Sin(angle)) / Math.Sqrt(2);
        }

        public static double GetY(double currentX, double currentY, double angle)
        {
            return (currentX * Math.Sin(angle) + currentY * Math.Cos(angle)) / Math.Sqrt(2);
        }

        public static void DrawDragonFractal(Pixels pixels, int iterationsCount, int seed)
        {
            var currentX = 1.0;
            var currentY = 0.0;
            var random = new Random(seed);

            for (int i = 0; i < iterationsCount; ++i)
            {
                var oldX = currentX;
                if (random.Next(2) == 0)
                {
                    currentX = GetX(currentX, currentY, Math.PI / 4);
                    currentY = GetY(oldX, currentY, Math.PI / 4);
                }
                else
                {
                    currentX = GetX(currentX, currentY, Math.PI * 3 / 4) + 1;
                    currentY = GetY(oldX, currentY, Math.PI * 3 / 4);
                }
                pixels.SetPixel(currentX, currentY);
            }
        }
    }
}
Это ништяк от чатжпт, только методы переделать
using System;
using System.Drawing;

namespace Fractals
{
    internal static class DragonFractalTask
    {
        public static double GetXCoord(double x, double y, double angle)
        {
            return (x * Math.Cos(angle) - y * Math.Sin(angle)) / Math.Sqrt(2);
        }

        public static double GetYCoord(double x, double y, double angle)
        {
            return (x * Math.Sin(angle) + y * Math.Cos(angle)) / Math.Sqrt(2);
        }
        public static void DrawDragonFractal(Pixels pixels, int iterationsCount, int seed)
        {
            var x = 1.0;
            var y = 0.0;
            var randomNumber = new Random(seed);

            for (int i = 0; i < iterationsCount; ++i)
            {
                var oldX = x;
                if (randomNumber.Next(2) == 0)
                {
                    x = GetXCoord(x, y, Math.PI / 4);
                    y = GetYCoord(oldX, y, Math.PI / 4);
                }
                else
                {
                    x = GetXCoord(x, y, Math.PI * 3 / 4) + 1;
                    y = GetYCoord(oldX, y, Math.PI * 3 / 4);
                }
                pixels.SetPixel(x, y);
            }
        }
    }
}
И ещё вот такой варик
﻿using System;
using System.Drawing;


namespace Fractals
{
    internal static class DragonFractalTask
    {
        public static double GetXCoord(double x, double y, double angle)
        {
            return (x * Math.Cos(angle) - y * Math.Sin(angle)) / Math.Sqrt(2);
        }

        public static double GetYCoord(double x, double y, double angle)
        {
            return (x * Math.Sin(angle) + y * Math.Cos(angle)) / Math.Sqrt(2);
        }

        public static void DrawDragonFractal(Pixels pixels, int iterationsCount, int seed)
        {
            var x = 1.0;
            var y = 0.0;
            var initRandom = new Random(seed);

            for (int i = 0; i < iterationsCount; ++i)
            {
                var oldX = x;
                // Transformation A
                if (initRandom.Next(2) == 0)
                {
                    x = GetXCoord(x, y, Math.PI / 4);
                    y = GetYCoord(oldX, y, Math.PI / 4);
                }
                // Transformation B
                else
                {
                    x = GetXCoord(x, y, Math.PI * 3 / 4) + 1;
                    y = GetYCoord(oldX, y, Math.PI * 3 / 4);
                }
                pixels.SetPixel(x, y);
            }
        }
    }
}
И ещё так можно
