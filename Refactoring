using System;
using Avalonia.Media;
using RefactorMe.Common;

namespace RefactorMe
{
    class Painter
    {
        static float coordinateX, coordinateY;
        static IGraphics graphics;

        public static void Initialize(IGraphics newPaint)
        {
            graphics = newPaint;
            graphics.Clear(Colors.Black);
        }

        public static void SetPosition(float x0, float y0)
        {
            coordinateX = x0;
            coordinateY = y0;
        }

        public static void Paint(Pen brush, double length, double angle)
        {
            //Делает шаг длиной dlina в направлении ugol и рисует пройденную траекторию
            var coordinateX2 = (float)(coordinateX + length * Math.Cos(angle));
            var coordinateY2 = (float)(coordinateY + length * Math.Sin(angle));
            graphics.DrawLine(brush, coordinateX, coordinateY, coordinateX2, coordinateY2);
            coordinateX = coordinateX2;
            coordinateY = coordinateY2;
        }

        public static void Change(double length, double angle)
        {
            coordinateX = (float)(coordinateX + length * Math.Cos(angle));
            coordinateY = (float)(coordinateY + length * Math.Sin(angle));
        }
    }

    public class ImpossibleSquare
    {
        const float Step1 = 0.375f;
        const float BrushSize = 0.04f;
        public static void Draw(int widht, int height, double angle, IGraphics graphics)
        {
            Painter.Initialize(graphics);

            var size = Math.Min(widht, height);

            TakePositionZero(widht, height, size);

            DrawSideLeft(size);//Рисуем 1-ую сторону

            Painter.Change(size * BrushSize, -Math.PI);
            Painter.Change(size * BrushSize * Math.Sqrt(2), 3 * Math.PI / 4);

            DrawSideRight(size);//Рисуем 2-ую сторону

            Painter.Change(size * BrushSize, -Math.PI / 2 - Math.PI);
            Painter.Change(size * BrushSize * Math.Sqrt(2), -Math.PI / 2 + 3 * Math.PI / 4);

            DrawSideDown(size);//Рисуем 3-ю сторону
            DrawSideUp(size);//Рисуем 4-ую сторону
        }

        private static void TakePositionZero(int widht, int height, int size)
        {
            float x0, y0;
            PozitionZero(widht, height, size, out x0, out y0);
            Painter.SetPosition(x0, y0);
        }

        private static void DrawSideLeft(int size)
        {
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1, 0);
            Painter.Paint(new Pen(Brushes.Yellow), size * BrushSize * Math.Sqrt(2), Math.PI / 4);
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1, Math.PI);
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1 - size * BrushSize, Math.PI / 2);
        }

        private static void DrawSideRight(int size)
        {
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1, -Math.PI / 2);
            Painter.Paint(new Pen(Brushes.Yellow), size * BrushSize * Math.Sqrt(2), -Math.PI / 2 + Math.PI / 4);
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1, -Math.PI / 2 + Math.PI);
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1 - size * BrushSize, -Math.PI / 2 + Math.PI / 2);
        }

        private static void DrawSideDown(int size)
        {
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1, Math.PI);
            Painter.Paint(new Pen(Brushes.Yellow), size * BrushSize * Math.Sqrt(2), Math.PI + Math.PI / 4);
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1, Math.PI + Math.PI);
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1 - size * BrushSize, Math.PI + Math.PI / 2);

            Painter.Change(size * BrushSize, Math.PI - Math.PI);
            Painter.Change(size * BrushSize * Math.Sqrt(2), Math.PI + 3 * Math.PI / 4);
        }

        private static void DrawSideUp(int size)
        {
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1, Math.PI / 2);
            Painter.Paint(new Pen(Brushes.Yellow), size * BrushSize * Math.Sqrt(2), Math.PI / 2 + Math.PI / 4);
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1, Math.PI / 2 + Math.PI);
            Painter.Paint(new Pen(Brushes.Yellow), size * Step1 - size * BrushSize, Math.PI / 2 + Math.PI / 2);

            Painter.Change(size * BrushSize, Math.PI / 2 - Math.PI);
            Painter.Change(size * BrushSize * Math.Sqrt(2), Math.PI / 2 + 3 * Math.PI / 4);
        }

        private static void PozitionZero(int widht, int height, int size, out float x0, out float y0)
        {
            var diagonalLength = Math.Sqrt(2) * (size * Step1 + size * BrushSize) / 2;
            x0 = (float)(diagonalLength * Math.Cos(Math.PI / 4 + Math.PI)) + widht / 2f;
            y0 = (float)(diagonalLength * Math.Sin(Math.PI / 4 + Math.PI)) + height / 2f;
        }
    }
}
